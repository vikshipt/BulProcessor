/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hti.user;

import com.logica.smpp.Data;
import com.logica.smpp.pdu.BindRequest;
import com.logica.smpp.pdu.BindResponse;
import com.logica.smpp.pdu.DeliverSMResp;
import com.logica.smpp.pdu.PDUException;
import com.logica.smpp.pdu.Request;
import com.logica.smpp.pdu.Response;
import com.logica.smpp.pdu.SubmitSM;
import com.logica.smpp.pdu.SubmitSMResp;
import com.logica.smpp.pdu.WrongLengthOfStringException;
import java.io.IOException;
import org.apache.log4j.Logger;

/**
 * <code>PDUProcessor</code> is abstract class which defines interface functions
 * for processing PDUs received by <code>SMSCSession</code> from client as well
 * as functions for the server side sending of PDU. The actual implementation of
 * the abstract functions of the class defines the behaviour of the particular
 * simulator.<br>
 * The implementations of this class are ment to be generated by descendant of
 * <code>PDUProcessorFactory</code> class whenewer new connection is accepted by
 * <code>SMSCListener</code>.
 *
 * @author Logica Mobile Networks SMPP Open Source Team
 * @version $Revision: 1.2 $
 * @see PDUProcessorFactory
 * @see SMSCSession
 * @see SMSCListener
 */
public class PDUProcessor {

    private Logger logger = Logger.getLogger(PDUProcessor.class);
    private boolean active = true;
    private UserSession session;
    /**
     * Indicates if the bound has passed.
     */
    private boolean bound = false;

    /**
     * The system id of the bounded ESME.
     */
    private String systemId = null;
    /**
     * System id of this simulator sent to the ESME in bind response.
     */
    private static final String SYSTEM_ID = "HLR_SERVER";

    /**
     * Private variables initialsed to default values.
     */
    public PDUProcessor() {
    }

    PDUProcessor(UserSession session) {
        this.session = session;
    }

    /**
     * Meant to process <code>request</code>s received from client.
     *
     * @param request the request received from client
     */
    public void clientRequest(Request request) {
        Response response;
        int commandStatus;
        int commandId = request.getCommandId();
        try {
            logger.debug("client request: " + request.debugString());
            if (!bound) { // the first PDU must be bound request
                if (commandId == Data.BIND_TRANSMITTER
                        || commandId == Data.BIND_RECEIVER
                        || commandId == Data.BIND_TRANSCEIVER) {
                    commandStatus = checkIdentity((BindRequest) request);
                    if (commandStatus == 0) { // authenticated
                        // firstly generate proper bind response
                        BindResponse bindResponse = (BindResponse) request.getResponse();
                        bindResponse.setSystemId(SYSTEM_ID);
                        // and send it to the client via serverResponse
                        serverResponse(bindResponse);
                        // success => bound
                        bound = true;
                    } else { // system id not authenticated
                        // get the response
                        response = request.getResponse();
                        // set it the error command status
                        response.setCommandStatus(commandStatus);
                        // and send it to the client via serverResponse
                        serverResponse(response);
                        // bind failed, stopping the session
                        session.stop();
                    }
                } else {
                    // the request isn't a bound req and this is wrong: if not
                    // bound, then the server expects bound PDU
                    if (request.canResponse()) {
                        // get the response
                        response = request.getResponse();
                        response.setCommandStatus(Data.ESME_RINVBNDSTS);
                        // and send it to the client via serverResponse
                        serverResponse(response);
                    } else {
                        // cannot respond to a request which doesn't have
                        // a response :-(
                    }
                    // bind failed, stopping the session
                    session.stop();
                }
            } else { // already bound, can receive other PDUs
                if (request.canResponse()) {
                    response = request.getResponse();
                    switch (commandId) { // for selected PDUs do extra steps
                        case Data.SUBMIT_SM:
                            SubmitSMResp submitResponse = (SubmitSMResp) response;
                            submitResponse.setMessageId("");
                            break;
                        case Data.ENQUIRE_LINK:
                            // do nothing, just respond as Enquire Response
                            logger.info(systemId + ": " + request.debugString());
                            break;
                        case Data.UNBIND:
                            // do nothing, just respond and after sending
                            // the response stop the session
                            break;
                    }
                    // send the prepared response
                    serverResponse(response);
                    if (commandId == Data.UNBIND) {
                        // unbind causes stopping of the session
                        session.stop();
                    }
                } else {
                    // can't respond => nothing to do :-)
                }
            }
        } catch (WrongLengthOfStringException e) {
            logger.debug("WrongLengthOfStringException", e);
        } catch (Exception e) {
            logger.debug("Exception", e);
        }
    }

    /**
     * Checks if the bind request contains valid system id and password. For
     * this uses the table of users provided in the constructor of the
     * <code>PDUProcessor</code>. If the authentication fails, i.e. if
     * either the user isn't found or the password is incorrect, the function
     * returns proper status code.
     *
     * @param request the bind request as received from the client
     * @return status code of the authentication; ESME_ROK if authentication
     * passed
     */
    private int checkIdentity(BindRequest request) {
        int commandStatus = Data.ESME_ROK;
        logger.debug(systemId + ":Checking Indentity");
        systemId = request.getSystemId();
     //   String password = request.getPassword();
        return commandStatus;
    }

    /**
     * Meant to process <code>response</code>s received from client.
     *
     * @param response the response received from client
     */
    public void clientResponse(Response response) {
        logger.trace("client response: " + response.debugString());
    }

    /**
     * Meant to process <code>response</code>s sent on behalf of the server.
     * This method is called by server and typically only sends the PDU to the
     * client.
     *
     * @param response the response which has to be sent to client
     */
    public void serverResponse(Response response) throws IOException, PDUException {
        logger.debug("server response: " + response.debugString());
        session.send(response);
    }

    /**
     * Stop the processor
     */
    public void stop() {
    }

    /**
     * Returns if this pdu processor is still active.
     *
     * @return the activity status of the processor
     * @see #exit()
     */
    public boolean isActive() {
        return active;
    }

    /**
     * Sets the processor to inactive state. Removes the processor from the
     * group it belonged to. Called from <code>SMSCSession</code>.
     *
     * @see SMSCSession#run()
     */
    public void exit() {
        active = false;
        stop();
    }
}
